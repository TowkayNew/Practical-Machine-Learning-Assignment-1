require(knitr)
install.packages("knitr")
install.packages("caret")
install.packages("rpart")
install.packages("randomForest")
library(knitr)
library(caret)
library(rpart)
library(randomForest)
naStrings <- c("NA","#DIV/0!","")
training <- read.csv("data/pml-training.csv", na.strings=naStrings)
setwd("E:\data science\Practical-Machine-Learning-Assignment-1")
setwd("E:\\data science\\Practical-Machine-Learning-Assignment-1")
training <- read.csv("data/pml-training.csv", na.strings=naStrings)
testing <- read.csv("data/pml-testing.csv", na.strings=naStrings)
nzvTraining <- nearZeroVar(training, saveMetrics = TRUE)
sum(nzvTraining$nzv)
training <- training[, !nzvTraining$nzv]
na60Percent <- sapply(colnames(training), function(x)
if(sum(is.na(training[, x])) > 0.60*nrow(training)) {
return(TRUE)
}else{
return(FALSE)
}
)
sum(na60Percent)
training <- training[, !na60Percent]
training <- training[, -(1:6)]
corr <- caret::findCorrelation(cor(training[, -53]), cutoff=0.8)
names(training)[corr]
names(training)
modelRPART <- rpart(classe ~ ., data=training, method="class")
predictionsRPART <- predict(modelRPART, testing, type = "class")
confusionMatrix(predictionsRPART, testing$classe)
modelRPART
predictionsRPART
confusionMatrix(predictionsRPART, testing$classe)
modelRF <- randomForest(classe ~. , data=training)
predictionsRF <- predict(modelRF, testing, type = "class")
confusionMatrix(predictionsRF, testing$classe)
testing2 <- testing[,names(training)]
names(training)
testing[,"classe"]
testing[,col="classe"]
testing[,classe]
testing[,c("classe")]
names(testing)
testing[,c("problem_id")]
testing[,c("classe")]
class(names(training))
names(training)
View(testing)
confusionMatrix(predictionsRPART, testing$classe)
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]
myTesting <- training[-inTrain, ]
dim(training)
dim(myTraining)
dim(myTesting)
29622-11776
19622-11776
modelRPART <- rpart(classe ~ ., data=myTraining, method="class")
predictionsRPART <- predict(modelRPART, myTesting, type = "class")
confusionMatrix(predictionsRPART, myTesting)
confusionMatrix(predictionsRPART, myTesting)
sort.list(myTesting)
?sort.list
table(predictionsRPART, myTesting)
library(MASS)
table(predictionsRPART, myTesting)
?table
predictionsRF
table(predictionsRPART, myTesting$classe)
confusionMatrix(predictionsRPART, myTesting$classe)
confusionMatrix(predictionsRPART, myTesting$classe)
library(e1071)
install.packages(e1071)
install.packages("e1071)
install.packages("e1071")
install.packages("e1071")
confusionMatrix(predictionsRPART, myTesting$classe)
modelRF <- randomForest(classe ~. , data=myTraining)
predictionsRF <- predict(modelRF, myTesting, type = "class")
confusionMatrix(predictionsRF, myTesting$classe)
predictionsRF <- predict(modFitB1, testing, type = "class")
predictionsRF <- predict(modelRF, testing, type = "class")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictionsRF)
